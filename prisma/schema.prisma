// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDUCATOR
  STUDENT
}

enum EducatorStatus {
  PENDING
  APPROVED
  REJECTED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}

enum QuizStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?   // For credentials login
  name          String?
  role          Role      @default(STUDENT)
  emailVerified DateTime?
  image         String?
  
  // Educator specific fields
  educatorStatus EducatorStatus?
  bio           String?
  qualification String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  createdQuizzes Quiz[]
  quizAttempts  QuizAttempt[]
  enrollments   QuizEnrollment[]

  @@map("users")
}

model Quiz {
  id          String    @id @default(cuid())
  title       String
  description String?
  code        String    @unique // Unique enrollment code
  materialUrl String?   // Link to study material
  timeLimit   Int?      // Time limit in minutes
  status      QuizStatus @default(DRAFT)
  isActive    Boolean   @default(true)
  
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  questions   Question[]
  attempts    QuizAttempt[]
  enrollments QuizEnrollment[]

  @@map("quizzes")
}

model Question {
  id          String       @id @default(cuid())
  question    String
  type        QuestionType
  options     Json?        // For multiple choice questions
  correctAnswer String
  explanation String?
  points      Int          @default(1)
  
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  answers QuestionAnswer[]

  @@map("questions")
}

model QuizEnrollment {
  id String @id @default(cuid())
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  enrolledAt DateTime @default(now())

  @@unique([userId, quizId])
  @@map("quiz_enrollments")
}

model QuizAttempt {
  id          String    @id @default(cuid())
  score       Float?    // Calculated score
  totalPoints Int?      // Total possible points
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  timeSpent   Int?      // Time spent in seconds
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  // Relations
  answers QuestionAnswer[]

  @@map("quiz_attempts")
}

model QuestionAnswer {
  id     String @id @default(cuid())
  answer String
  isCorrect Boolean @default(false)
  points    Int     @default(0)
  
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  attemptId String
  attempt   QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([questionId, attemptId])
  @@map("question_answers")
}
